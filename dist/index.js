!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.TimeInputPolyfill=t():e.TimeInputPolyfill=t()}(window,(function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=6)}([function(e,t,n){"use strict";e.exports=n(3)},function(e,t,n){(function(e){var t,n=((t=document.createElement("input")).setAttribute("type","time"),t.setAttribute("value","not-a-time"),"not-a-time"!==t.value);window&&(window.supportsTime=n),e&&(e.exports=n)}).call(this,n(5)(e))},function(e,t){e.exports=function(e,t){var n=document.createElement("script");n.src=e,n.onload=t,document.head.appendChild(n)}},function(e,t,n){"use strict";
/** @license React v16.10.2
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(4),o="function"==typeof Symbol&&Symbol.for,u=o?Symbol.for("react.element"):60103,i=o?Symbol.for("react.portal"):60106,l=o?Symbol.for("react.fragment"):60107,s=o?Symbol.for("react.strict_mode"):60108,a=o?Symbol.for("react.profiler"):60114,c=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,p=o?Symbol.for("react.forward_ref"):60112,y=o?Symbol.for("react.suspense"):60113,h=o?Symbol.for("react.suspense_list"):60120,m=o?Symbol.for("react.memo"):60115,d=o?Symbol.for("react.lazy"):60116;o&&Symbol.for("react.fundamental"),o&&Symbol.for("react.responder"),o&&Symbol.for("react.scope");var v="function"==typeof Symbol&&Symbol.iterator;function b(e){for(var t=e.message,n="https://reactjs.org/docs/error-decoder.html?invariant="+t,r=1;r<arguments.length;r++)n+="&args[]="+encodeURIComponent(arguments[r]);return e.message="Minified React error #"+t+"; visit "+n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",e}var _={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g={};function w(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||_}function S(){}function k(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||_}w.prototype.isReactComponent={},w.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw b(Error(85));this.updater.enqueueSetState(this,e,t,"setState")},w.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},S.prototype=w.prototype;var P=k.prototype=new S;P.constructor=k,r(P,w.prototype),P.isPureReactComponent=!0;var O={current:null},j={suspense:null},x={current:null},C=Object.prototype.hasOwnProperty,E={key:!0,ref:!0,__self:!0,__source:!0};function $(e,t,n){var r,o={},i=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)C.call(t,r)&&!E.hasOwnProperty(r)&&(o[r]=t[r]);var s=arguments.length-2;if(1===s)o.children=n;else if(1<s){for(var a=Array(s),c=0;c<s;c++)a[c]=arguments[c+2];o.children=a}if(e&&e.defaultProps)for(r in s=e.defaultProps)void 0===o[r]&&(o[r]=s[r]);return{$$typeof:u,type:e,key:i,ref:l,props:o,_owner:x.current}}function A(e){return"object"==typeof e&&null!==e&&e.$$typeof===u}var D=/\/+/g,T=[];function M(e,t,n,r){if(T.length){var o=T.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function R(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>T.length&&T.push(e)}function I(e,t,n){return null==e?0:function e(t,n,r,o){var l=typeof t;"undefined"!==l&&"boolean"!==l||(t=null);var s=!1;if(null===t)s=!0;else switch(l){case"string":case"number":s=!0;break;case"object":switch(t.$$typeof){case u:case i:s=!0}}if(s)return r(o,t,""===n?"."+N(t,0):n),1;if(s=0,n=""===n?".":n+":",Array.isArray(t))for(var a=0;a<t.length;a++){var c=n+N(l=t[a],a);s+=e(l,c,r,o)}else if(null===t||"object"!=typeof t?c=null:c="function"==typeof(c=v&&t[v]||t["@@iterator"])?c:null,"function"==typeof c)for(t=c.call(t),a=0;!(l=t.next()).done;)s+=e(l=l.value,c=n+N(l,a++),r,o);else if("object"===l)throw r=""+t,b(Error(31),"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,"");return s}(e,"",t,n)}function N(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function L(e,t){e.func.call(e.context,t,e.count++)}function K(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?B(e,r,n,(function(e){return e})):null!=e&&(A(e)&&(e=function(e,t){return{$$typeof:u,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(D,"$&/")+"/")+n)),r.push(e))}function B(e,t,n,r,o){var u="";null!=n&&(u=(""+n).replace(D,"$&/")+"/"),I(e,K,t=M(t,u,r,o)),R(t)}function F(){var e=O.current;if(null===e)throw b(Error(321));return e}var U={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return B(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;I(e,L,t=M(null,null,t,n)),R(t)},count:function(e){return I(e,(function(){return null}),null)},toArray:function(e){var t=[];return B(e,t,null,(function(e){return e})),t},only:function(e){if(!A(e))throw b(Error(143));return e}},createRef:function(){return{current:null}},Component:w,PureComponent:k,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:c,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:p,render:e}},lazy:function(e){return{$$typeof:d,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:m,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return F().useCallback(e,t)},useContext:function(e,t){return F().useContext(e,t)},useEffect:function(e,t){return F().useEffect(e,t)},useImperativeHandle:function(e,t,n){return F().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return F().useLayoutEffect(e,t)},useMemo:function(e,t){return F().useMemo(e,t)},useReducer:function(e,t,n){return F().useReducer(e,t,n)},useRef:function(e){return F().useRef(e)},useState:function(e){return F().useState(e)},Fragment:l,Profiler:a,StrictMode:s,Suspense:y,unstable_SuspenseList:h,createElement:$,cloneElement:function(e,t,n){if(null==e)throw b(Error(267),e);var o=r({},e.props),i=e.key,l=e.ref,s=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,s=x.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var a=e.type.defaultProps;for(c in t)C.call(t,c)&&!E.hasOwnProperty(c)&&(o[c]=void 0===t[c]&&void 0!==a?a[c]:t[c])}var c=arguments.length-2;if(1===c)o.children=n;else if(1<c){a=Array(c);for(var f=0;f<c;f++)a[f]=arguments[f+2];o.children=a}return{$$typeof:u,type:e.type,key:i,ref:l,props:o,_owner:s}},createFactory:function(e){var t=$.bind(null,e);return t.type=e,t},isValidElement:A,version:"16.10.2",unstable_withSuspenseConfig:function(e,t){var n=j.suspense;j.suspense=void 0===t?null:t;try{e()}finally{j.suspense=n}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:O,ReactCurrentBatchConfig:j,ReactCurrentOwner:x,IsSomeRendererActing:{current:!1},assign:r}},H={default:U},V=H&&U||H;e.exports=V.default||V},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable;function i(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,l,s=i(e),a=1;a<arguments.length;a++){for(var c in n=Object(arguments[a]))o.call(n,c)&&(s[c]=n[c]);if(r){l=r(n);for(var f=0;f<l.length;f++)u.call(n,l[f])&&(s[l[f]]=n[l[f]])}}return s}},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},u=Object.keys(e);for(r=0;r<u.length;r++)n=u[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(e);for(r=0;r<u.length;r++)n=u[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function u(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)){var n=[],r=!0,o=!1,u=void 0;try{for(var i,l=e[Symbol.iterator]();!(r=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){o=!0,u=e}finally{try{r||null==l.return||l.return()}finally{if(o)throw u}}return n}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function l(e){return(l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e){return(s="function"==typeof Symbol&&"symbol"===l(Symbol.iterator)?function(e){return l(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":l(e)})(e)}function a(e,t){return!t||"object"!==s(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function f(e,t){return(f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}n.r(t);var p=n(0),y=n.n(p),h=n(1),m=n.n(h),d=n(2),v=n.n(d);function b(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function _(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?b(n,!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):b(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}n.d(t,"default",(function(){return O}));var g=!1,w=function(e){if(isNaN(e))return e;var t=parseInt(e);return t<10?"0"+t:e};window.addEventListener("keyup",(function(e){return g=e.shiftKey})),window.addEventListener("keydown",(function(e){return g=e.shiftKey}));var S,k=!1,P=document.createElement("style");P.innerHTML=".".concat("react-time-input-polyfill-target","::-ms-clear { display: none; }"),document.getElementsByTagName("head")[0].appendChild(P);var O=function(e){function t(e){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(n=a(this,c(t).call(this,e))).$input=y.a.createRef(),n.focused_via_click=!1,n.state={time:{hrs:"--",min:"--",mode:"--"},value24hr:e.value||"",currentSegment:null,usePolyfill:!m.a,forcedValue:null},n}var n,l,s;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}(t,e),n=t,(l=[{key:"onPolyfillLoad",value:function(e){this.polyfill=e,this.setState({usePolyfill:!0,time:this.polyfill.get_values_from_24hr(this.state.value24hr)}),k||(S=this.polyfill.create_a11y_block(),k=!0),this.manual_entry_log={hrs:new this.polyfill.manual_entry_log,min:new this.polyfill.manual_entry_log};var t=this.$input.current;t.polyfill={label:this.polyfill.get_label(t),$a11y:S}}},{key:"update_a11y",value:function(e){if(!this.state.usePolyfill)return null;this.polyfill.update_a11y(this.$input.current,e)}},{key:"componentDidMount",value:function(){var e=this;setTimeout((function(){var t;e.flash24hrTime=(t=e,function(){t.state.usePolyfill&&(t.setState({forcedValue:t.state.value24hr}),setTimeout((function(){return t.setState({forcedValue:null})}),1))}),e.$input.current.form&&e.$input.current.form.addEventListener("submit",e.flash24hrTime)}),0),!this.props.forcePolyfill&&m.a||function(e){if(window.timePolyfillHelpers)return e(),null;v()("https://cdn.jsdelivr.net/npm/react-time-input-polyfill@1/dist/timePolyfillHelpers.js",e)}((function(){e.onPolyfillLoad(window.timePolyfillHelpers)}))}},{key:"componentWillUnmount",value:function(){this.$input.current.form&&this.$input.current.form.removeEventListener("submit",this.flash24hrTime)}},{key:"componentDidUpdate",value:function(e,t){var n=e.value!==this.props.value,r=t.value24hr!==this.state.value24hr;if(!n&&!r)return null;r?this.onTimeChange():n&&this.set_time(this.props.value)}},{key:"set_time",value:function(e){var t=u(e.split(":").map((function(e){return isNaN(e)?e:parseInt(e)})),2),n=t[0],r=t[1],o=this.state.usePolyfill?{hrs:this.polyfill.convert_hours_to_12hr_time(n),min:r,mode:n>12?"PM":"AM"}:null;this.setState({time:this.state.usePolyfill?e?o:this.state.time:null,value24hr:e})}},{key:"nudge_current_segment",value:function(e){var t=this,n=this.state.currentSegment,r=this.state.time,o={},u="up"===e?1:-1;if("--"===r[n]){var i=function(){return new Date};o={hrs:function(){return t.polyfill.convert_hours_to_12hr_time(i().getHours())},min:function(){return i().getMinutes()},mode:function(){return i().getHours()>11?"PM":"AM"}}}else{var l={up:r.min<59?r.min+u:0,down:0===r.min?59:r.min+u};o={hrs:function(){return t.polyfill.convert_hours_to_12hr_time(r.hrs+u)},min:function(){return l[e]},mode:function(){return"AM"===r.mode?"PM":"AM"}}}this.set_segment(n,o[n]())}},{key:"get_12hr_value",value:function(e){var t=e||this.state.time;return t?[w(t.hrs),":",w(t.min)," ",t.mode].join(""):""}},{key:"set_segment",value:function(e,t){var n=_({},this.state.time,o({},e,isNaN(t)?t:parseInt(t))),r=this.get_12hr_value(n),u=this.polyfill.convert_to_24hr_time(r);this.setState({time:n,value24hr:u})}},{key:"traverse_segments",value:function(e){var t=this,n=this.polyfill.segments,r="left"==e?-1:1,o=n.indexOf(this.state.currentSegment)+r,u=n[o<=0?0:o>=2?2:o];this.clear_entry_log(),this.setState({currentSegment:u}),setTimeout((function(){t.update_a11y(["select"])}),0)}},{key:"clear_entry_log",value:function(){var e=this.state.currentSegment;"mode"!==e&&this.manual_entry_log[e].clear()}},{key:"next_segment",value:function(){this.traverse_segments("right")}},{key:"prev_segment",value:function(){this.traverse_segments("left")}},{key:"clear_current_segment",value:function(){this.set_segment(this.state.currentSegment,"--")}},{key:"onTimeChange",value:function(){var e=this;this.props.onChange&&this.props.onChange({value:this.state.value24hr,element:this.$input.current}),setTimeout((function(){e.update_a11y(["update"])}),0)}},{key:"handleChange",value:function(e){if(this.state.usePolyfill)return null;this.setState({value24hr:e.target.value})}},{key:"handleMouseDown",value:function(e){this.props.onMouseDown&&this.props.onMouseDown(e),this.focused_via_click=!0,this.$input.current.matches(":focus")&&this.update_a11y(["select"])}},{key:"handleClick",value:function(e){if(this.props.onClick&&this.props.onClick(e),!this.state.usePolyfill)return null;this.polyfill.select_cursor_segment(this.$input.current),this.setState({currentSegment:this.polyfill.get_current_segment(this.$input.current)})}},{key:"handleFocus",value:function(e){if(this.props.onFocus&&this.props.onFocus(e),!this.state.usePolyfill)return null;var t=g?"mode":"hrs";this.focused_via_click||this.setState({currentSegment:t}),this.update_a11y(["initial","select"])}},{key:"handleBlur",value:function(e){this.props.onBlur&&this.props.onBlur(e),this.focused_via_click=!1,this.setState({currentSegment:null})}},{key:"handleTab",value:function(e){e.shiftKey&&"hrs"!==this.state.currentSegment?(e.preventDefault(),this.prev_segment()):e.shiftKey||"mode"===this.state.currentSegment||(e.preventDefault(),this.next_segment())}},{key:"handleKeyDown",value:function(e){var t=this;if(this.props.onKeyDown&&this.props.onKeyDown(e),!this.state.usePolyfill)return null;var n=e.key,r={ArrowRight:function(){return t.next_segment()},ArrowLeft:function(){return t.prev_segment()},ArrowUp:function(){return t.nudge_current_segment("up")},ArrowDown:function(){return t.nudge_current_segment("down")},Delete:function(){return t.clear_current_segment()},Backspace:function(){return t.clear_current_segment()},numberKey:function(){return t.enter_number(e.key)},A_or_P:function(){return t.enter_A_or_P(e.key)}},o=/\d/.test(e.key),u=/[ap]/i.test(e.key);"Tab"===n?this.handleTab(e):r[n]?(e.preventDefault(),r[n]()):o?r.numberKey():u?r.A_or_P():"Escape"!==n&&e.preventDefault()}},{key:"enter_A_or_P",value:function(e){var t=/a/i.test(e);this.set_segment("mode",t?"AM":"PM")}},{key:"enter_number",value:function(e){var t=this.state.currentSegment,n=parseInt(e),r=this.manual_entry_log[t],o=r.items.length,u={hrs:[1,2],min:[5,9]},i=u[t][o];o<2&&r.add(n);var l=parseInt(u[t].join("")),s=parseInt(r.items.join(""));l>=s&&this.set_segment(t,s),(n>i||2===r.items.length)&&this.next_segment()}},{key:"render",value:function(){var e=this,t=this.props,n=(t.value,t.forcePolyfill,t.className),o=r(t,["value","forcePolyfill","className"]),u=this.state,i=u.usePolyfill,l=u.value24hr,s=u.currentSegment,a=u.forcedValue,c=i?this.get_12hr_value():null;i&&null!==s&&setTimeout((function(){return e.polyfill.select_segment(e.$input.current,s)}),0);var f=this.state.usePolyfill?"react-time-input-polyfill-target":"";return y.a.createElement("input",_({},o,{onChange:function(t){return e.handleChange(t)},onFocus:function(t){return e.handleFocus(t)},onBlur:function(t){return e.handleBlur(t)},onMouseDown:function(t){return e.handleMouseDown(t)},onClick:function(t){return e.handleClick(t)},onKeyDown:function(t){return e.handleKeyDown(t)},ref:this.$input,type:i?"text":"time",value:i?a||c:l,className:[n||"",f].join(" ").trim()||void 0}),null)}}])&&i(n.prototype,l),s&&i(n,s),t}(y.a.Component)}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,